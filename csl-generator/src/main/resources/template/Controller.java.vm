package ${package}.${moduleName}.controller;

import com.csl.plus.annotation.SysLog;
import com.csl.plus.utils.CommonResult;
import com.csl.plus.utils.ValidatorUtils;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;

import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.I${className}Service;
import org.springframework.web.bind.annotation.*;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Slf4j
@RestController
@Api(tags = "/api/${className}Controller", description = "${comments}管理")
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller {
    @Autowired
    private I${className}Service ${classname}Service;

    /**
     * 列表
     */
    @SysLog(MODULE = "${moduleName}", REMARK = "根据条件查询列表")
    @ApiOperation("根据条件查询列表")
    @GetMapping("/list")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:list')")
    public Object get${className}ByPage(${className} entity, @RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum,
			@RequestParam(value = "pageSize", defaultValue = "5") Integer pageSize){
        try {
			return new CommonResult()
					.success(${classname}Service.page(new Page<${className}>(pageNum, pageSize), new QueryWrapper<>(entity)));
		} catch (Exception e) {
			log.error("根据条件查询所有${comments}列表：%s", e.getMessage(), e);
		}
		return new CommonResult().failed();
    }


    /**
     * 信息
     */
     /**
    @SysLog(MODULE = "${moduleName}", REMARK = "根据条件查询${comments}列表")
    @ApiOperation("根据条件查询${comments}列表") 
    @GetMapping("/info/{${pk.attrname}}")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:info')")
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        return R.ok().put("${classname}", ${classname});
    }
	*/
    /**
     * 保存
     */
    @SysLog(MODULE = "${moduleName}", REMARK = "保存${comments}")
    @ApiOperation("保存${comments}")
    @PostMapping("/save")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:save')")
    public Object save(@RequestBody ${className} entity){
		try {
			if (${classname}Service.saves(entity)) {
				return new CommonResult().success();
			}
		} catch (Exception e) {
			log.error("保存帮助表：%s", e.getMessage(), e);
			return new CommonResult().failed();
		}
		return new CommonResult().failed();
    }

    /**
     * 修改
     */
    @SysLog(MODULE = "${moduleName}", REMARK = "修改${comments}")
    @ApiOperation("修改${comments}")
    @PostMapping("/update")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:update')")
    public Object update(@RequestBody ${className} entity){
		try {
			if (${classname}Service.updateById(entity)) {
				return new CommonResult().success();
			}
		} catch (Exception e) {
			log.error("更新帮助表：%s", e.getMessage(), e);
			return new CommonResult().failed();
		}
		return new CommonResult().failed();
    }

    /**
     * 删除
     */
    @SysLog(MODULE = "${moduleName}", REMARK = "删除${comments}")
    @ApiOperation("删除${comments}")
    @DeleteMapping("/delete")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:delete')")
    public Object delete(@ApiParam("id") @PathVariable Long id){
		try {
			if (ValidatorUtils.empty(id)) {
				return new CommonResult().paramFailed("帮助表id");
			}
			if (${classname}Service.removeById(id)) {
				return new CommonResult().success();
			}
		} catch (Exception e) {
			log.error("删除帮助表：%s", e.getMessage(), e);
			return new CommonResult().failed();
		}
		return new CommonResult().failed();
    }

	@SysLog(MODULE = "${moduleName}", REMARK = "查询${comments}明细")
	@ApiOperation("查询${comments}明细")
	@GetMapping(value = "/{id}")
	@PreAuthorize("hasAuthority('${moduleName}:${pathName}:read')")
	public Object get${className}ById(@ApiParam("id") @PathVariable Long id) {
		try {
			if (ValidatorUtils.empty(id)) {
				return new CommonResult().paramFailed("${comments}id");
			}
			${className} object = ${classname}Service.getById(id);
			return new CommonResult().success(object);
		} catch (Exception e) {
			log.error("查询${comments}明细：%s", e.getMessage(), e);
			return new CommonResult().failed();
		}
	}
}
